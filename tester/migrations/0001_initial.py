# Generated by Django 4.2.5 on 2023-10-07 01:10

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='последний вход')),
                ('is_superuser', models.BooleanField(default=False, help_text='Указывает, что пользователь имеет все права без явного их назначения.', verbose_name='статус суперпользователя')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='имя')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='фамилия')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='адрес электронной почты')),
                ('is_staff', models.BooleanField(default=False, help_text='Отметьте, если пользователь может входить в административную часть сайта.', verbose_name='статус персонала')),
                ('is_active', models.BooleanField(default=True, help_text='Отметьте, если пользователь должен считаться активным. Уберите эту отметку вместо удаления учётной записи.', verbose_name='активный')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата регистрации')),
                ('phone_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='phone number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Район')),
            ],
            options={
                'verbose_name': 'Район',
                'verbose_name_plural': 'Районы',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Регион')),
            ],
            options={
                'verbose_name': 'Регион',
                'verbose_name_plural': 'Регионы',
            },
        ),
        migrations.CreateModel(
            name='Street',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='имя')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tester.district', verbose_name='Район')),
            ],
            options={
                'verbose_name': 'Улица',
                'verbose_name_plural': 'Улицы',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('house', models.CharField(max_length=16, verbose_name='Дом')),
                ('apartment', models.CharField(blank=True, max_length=32, null=True, verbose_name='Квартира')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата открытия')),
                ('closed_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата закрытия')),
                ('completion_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата выполнения')),
                ('login', models.CharField(blank=True, max_length=15, null=True, verbose_name='Логин')),
                ('first_contact', models.CharField(default=None, max_length=13, null=True, verbose_name='Основной номер')),
                ('second_contact', models.CharField(blank=True, default=None, max_length=13, null=True, verbose_name='Доп. номер')),
                ('comment_master', models.TextField(blank=True, default=None, null=True, verbose_name='Комментарий мастера')),
                ('comment_operator', models.TextField(blank=True, default=None, null=True, verbose_name='Комментарий оператора')),
                ('update', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Дата обновления')),
                ('type', models.CharField(choices=[('Ремонт', 'Ремонт'), ('Настройка', 'Настройка'), ('Перенос', 'Перенос'), ('Отключение', 'Отключение'), ('Установка', 'Установка')], max_length=13, verbose_name='Тип заявки')),
                ('priority', models.CharField(choices=[('Обычный', 'Обычный'), ('Срочный', 'Срочный'), ('Корпоративный', 'Корпоративный')], default='Обычный', max_length=13, verbose_name='Приоритет')),
                ('status', models.BooleanField(choices=[(True, 'Открыта'), (False, 'Закрыта')], default=True)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tester.district', verbose_name='Район')),
                ('master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='mater_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Мастер')),
                ('operator', models.ForeignKey(default=True, on_delete=django.db.models.deletion.PROTECT, related_name='operator_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Оператор')),
                ('street', smart_selects.db_fields.ChainedForeignKey(chained_field='district', chained_model_field='district', on_delete=django.db.models.deletion.CASCADE, to='tester.street')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Заявки',
            },
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Дом')),
                ('apartment', models.CharField(blank=True, max_length=16, null=True, verbose_name='Квартира')),
                ('street', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tester.street', verbose_name='Улица')),
            ],
            options={
                'verbose_name': 'Дом',
                'verbose_name_plural': 'Дома',
            },
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tester.region', verbose_name='Регион'),
        ),
    ]
